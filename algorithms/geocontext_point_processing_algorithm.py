# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeocontextPointProcessing
                                 A QGIS plugin
 This plugin requests all geocontext information for points
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-20
        copyright            : (C) 2022 by Kartoza
        email                : divan@kartoza.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Kartoza'
__date__ = '2022-02-20'
__copyright__ = '(C) 2022 by Kartoza'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import sys
import os
import inspect

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterString,
                       QgsProcessingParameterEnum,
                       QgsVectorLayer)


# Adds the plugin core path to the system path
cur_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(cur_dir)
sys.path.insert(0, parentdir)

from utilities.utilities import (process_point,
                                 convert_multipart_to_singlepart,
                                 create_vector_file,
                                 get_request_crs)


class GeocontextPointProcessingAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    INPUT_POINT_LAYER = "Input point layer"
    REGISTRY = "Registry"
    KEY = "Key"
    FIELD_NAME = "Field name"
    OUTPUT_POINT_LAYER = "Output point layer"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_POINT_LAYER,
                self.tr('Point layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                self.REGISTRY,
                self.tr('Registry'),
                options=[self.tr('Service'), self.tr('Group'), self.tr('Collection')],
                defaultValue=0,
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                self.KEY,
                self.tr('Key'),
                options=[self.tr('TEST1'), self.tr('TEST2'), self.tr('TEST3')],
                defaultValue=0,
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                self.FIELD_NAME,
                self.tr('Field name/prefix'),
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT_POINT_LAYER,
                self.tr('Output point layer'),
                'Geopackage files (*.gpkg)'
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        input_points = self.parameterAsSource(parameters, self.INPUT_POINT_LAYER, context)
        registry = self.parameterAsString(parameters, self.REGISTRY, context)
        key = self.parameterAsString(parameters, self.KEY, context)
        field_name = self.parameterAsString(parameters, self.FIELD_NAME, context)
        output_points = self.parameterAsFileOutput(parameters, self.OUTPUT_POINT_LAYER, context)

        print(str(input_points))

        layer_crs = get_request_crs()
        create_vector_file(input_points, output_points, layer_crs)
        convert_multipart_to_singlepart(input_points)

        output_file_name = os.path.basename(output_points)
        input_new = QgsVectorLayer(output_points, output_file_name)

        list_points = input_new.getFeatures()
        total = input_new.featureCount()
        completed = 0
        for point in list_points:
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                feedback.pushInfo("Operation canceled by user.")
                break

            process_point(point, registry, 'srtm_dem', 'height', )

            # Update the progress bar
            completed = completed + 1
            feedback.setProgress(int(completed * total))
            feedback.setProgressText("CURRENTLY SOMEWHERE")

        if not feedback.isCanceled():
            print("CREATE FILE HERE")

        # Return the results of the algorithm
        return {self.OUTPUT_POINT_LAYER: output_points}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Geocontext point processing'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Geocontext'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GeocontextPointProcessingAlgorithm()

    def helpURL(self):
        return "https://github.com/kartoza/GeoContextQGISPlugin/"

    def shortHelpString(self):
        str = """
        Process a provided point layer by requesting the selected Geocontext data for each of the points in the layer.
        """

    def shortDescription(self):
        return "Process a provided point layer by requesting the selected Geocontext data for each of the points in the layer."

    def icon(self):
        return QIcon("icon.png")
